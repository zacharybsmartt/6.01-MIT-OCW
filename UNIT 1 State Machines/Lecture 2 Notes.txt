P, C, A, P = Primitives, Abstracts, Combinations, Patterns

Imperative code
    - recipe like, procedural

Functional
    - focus on procedures that mimic mathematical functions
    - Functions that eat inputs, generate outputs, and produce no side effects

Object Oriented
    - focus on collections of related procedures
    - organize programs in relation to hiererchies or related classes and instances

1:00:31

def apply(oplist, arg):
    if len(oplist) == 0:
        return arg
    
    else: 
        return apply(oplist[1:}, oplist{0}](arg))

This is a recursive function ^ (remember to have a base condition with recursive functions "a simple base case you know the answer to")

OOP can solve the increment square problem with a binary tree class where options are square and increment and a node has a parent, 
answer, and action

State Machine class

class SM:
    def start(self):
        self.state = self.startState 

    def step(self, inp):
        (s, o) = self.getNextValues(self.state,inp)
        self.state = s
        return o

    def transduc(self, inputs):
        self.start()
        return [self.step(inp) for inp in inputs]

#then we can use inherticance to sprcify the kind of state machine we are working with

class Turnstile(SM):
    startState = 'locked'

    def getNextValues(self, state, inp):
        if inp == 'coin':
            retur ('unlocked', 'enter')
ETC ETC ETC ETC ETC ETC ETC


